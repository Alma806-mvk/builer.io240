interface FileGenerationOptions {
  url: string;
  title: string;
  keywords: string[];
  fileType: string;
  category: string;
}

export class FileDownloadService {
  static async generateAndDownloadFile(
    options: FileGenerationOptions,
  ): Promise<void> {
    const { url, title, keywords, fileType, category } = options;
    const cleanTitle =
      title.replace(/[^a-zA-Z0-9\s]/g, "").trim() || "Download";

    switch (fileType.toLowerCase()) {
      case ".pdf":
      case "pdf":
        await this.generatePDFFile(cleanTitle, url, keywords, category);
        break;
      case ".txt":
      case "txt":
        await this.generateTextFile(cleanTitle, url, keywords, category);
        break;
      case ".json":
      case "json":
        await this.generateJSONFile(cleanTitle, url, keywords, category);
        break;
      case ".csv":
      case "csv":
        await this.generateCSVFile(cleanTitle, url, keywords, category);
        break;
      case ".html":
      case "html":
        await this.generateHTMLFile(cleanTitle, url, keywords, category);
        break;
      case ".md":
      case "markdown":
        await this.generateMarkdownFile(cleanTitle, url, keywords, category);
        break;
      case ".xml":
      case "xml":
        await this.generateXMLFile(cleanTitle, url, keywords, category);
        break;
      default:
        // For other file types, generate a generic file with metadata
        await this.generateGenericFile(
          cleanTitle,
          url,
          keywords,
          category,
          fileType,
        );
        break;
    }
  }

  private static async generatePDFFile(
    title: string,
    url: string,
    keywords: string[],
    category: string,
  ): Promise<void> {
    // Since we can't easily generate actual PDFs in browser, create a PDF-like text content
    const content = this.generatePDFContent(title, url, keywords, category);

    // For now, we'll create a text file that represents PDF content
    // In a real implementation, you'd use a library like jsPDF
    const blob = new Blob([content], { type: "application/pdf" });
    this.downloadBlob(blob, `${title.replace(/\s+/g, "_")}_info.pdf`);
  }

  private static generatePDFContent(
    title: string,
    url: string,
    keywords: string[],
    category: string,
  ): string {
    return `%PDF-1.4
% Generated by AI Studio Pro

1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 500
>>
stream
BT
/F1 24 Tf
50 750 Td
(${title}) Tj
0 -50 Td
/F1 12 Tf
(URL: ${url}) Tj
0 -30 Td
(Category: ${category}) Tj
0 -30 Td
(Keywords: ${keywords.join(", ")}) Tj
0 -50 Td
(Generated on: ${new Date().toLocaleDateString()}) Tj
0 -30 Td
(This file contains metadata about the searched resource.) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000010 00000 n 
0000000056 00000 n 
0000000111 00000 n 
0000000212 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
500
%%EOF`;
  }

  private static async generateTextFile(
    title: string,
    url: string,
    keywords: string[],
    category: string,
  ): Promise<void> {
    const content = `${title}
${"=".repeat(title.length)}

URL: ${url}
Category: ${category}
Keywords: ${keywords.join(", ")}
Generated: ${new Date().toLocaleString()}

DESCRIPTION:
This text file contains information about the searched resource.

KEYWORDS FOUND:
${keywords.map((keyword) => `- ${keyword}`).join("\n")}

NOTES:
You can use this file to keep track of useful resources you've found.
The URL above links to the original content.

---
Generated by AI Studio Pro
`;

    const blob = new Blob([content], { type: "text/plain" });
    this.downloadBlob(blob, `${title.replace(/\s+/g, "_")}_info.txt`);
  }

  private static async generateJSONFile(
    title: string,
    url: string,
    keywords: string[],
    category: string,
  ): Promise<void> {
    const data = {
      title,
      url,
      category,
      keywords,
      generatedAt: new Date().toISOString(),
      metadata: {
        domain: this.extractDomain(url),
        searchDate: new Date().toLocaleDateString(),
        fileType: "JSON Resource Info",
        description:
          "Metadata file containing information about the searched resource",
      },
      tags: keywords,
      source: "AI Studio Pro Web Search",
    };

    const content = JSON.stringify(data, null, 2);
    const blob = new Blob([content], { type: "application/json" });
    this.downloadBlob(blob, `${title.replace(/\s+/g, "_")}_info.json`);
  }

  private static async generateCSVFile(
    title: string,
    url: string,
    keywords: string[],
    category: string,
  ): Promise<void> {
    const csvContent = `Title,URL,Category,Keywords,Generated Date,Domain
"${title}","${url}","${category}","${keywords.join("; ")}","${new Date().toLocaleDateString()}","${this.extractDomain(url)}"

# Resource Information CSV
# Generated by AI Studio Pro Web Search
# This file contains metadata about your searched resource

# Individual Keywords:
${keywords.map((keyword, index) => `Keyword ${index + 1},${keyword},${category},${new Date().toLocaleDateString()}`).join("\n")}
`;

    const blob = new Blob([csvContent], { type: "text/csv" });
    this.downloadBlob(blob, `${title.replace(/\s+/g, "_")}_info.csv`);
  }

  private static async generateHTMLFile(
    title: string,
    url: string,
    keywords: string[],
    category: string,
  ): Promise<void> {
    const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title} - Resource Info</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            color: #f1f5f9;
            min-height: 100vh;
        }
        .container {
            background: rgba(30, 41, 59, 0.8);
            padding: 30px;
            border-radius: 12px;
            border: 1px solid #475569;
            backdrop-filter: blur(10px);
        }
        h1 {
            color: #38bdf8;
            margin-bottom: 20px;
            border-bottom: 2px solid #0ea5e9;
            padding-bottom: 10px;
        }
        .info-grid {
            display: grid;
            gap: 20px;
            margin: 20px 0;
        }
        .info-item {
            background: #334155;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #475569;
        }
        .label {
            font-weight: 600;
            color: #94a3b8;
            margin-bottom: 5px;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .value {
            color: #f1f5f9;
            word-break: break-all;
        }
        .keywords {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        .keyword-tag {
            background: #0ea5e9;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }
        .category-badge {
            display: inline-block;
            padding: 6px 16px;
            background: #059669;
            color: white;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }
        .url-link {
            color: #38bdf8;
            text-decoration: none;
            padding: 10px 20px;
            background: #1e40af;
            border-radius: 8px;
            display: inline-block;
            margin-top: 10px;
            transition: background 0.2s;
        }
        .url-link:hover {
            background: #1d4ed8;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #475569;
            color: #64748b;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸ“„ ${title}</h1>
        
        <div class="info-grid">
            <div class="info-item">
                <div class="label">Original URL</div>
                <div class="value">
                    <a href="${url}" target="_blank" class="url-link">
                        ðŸ”— Open Original Link
                    </a>
                </div>
            </div>
            
            <div class="info-item">
                <div class="label">Category</div>
                <div class="value">
                    <span class="category-badge">${category}</span>
                </div>
            </div>
            
            <div class="info-item">
                <div class="label">Keywords Found</div>
                <div class="keywords">
                    ${keywords.map((keyword) => `<span class="keyword-tag">${keyword}</span>`).join("")}
                </div>
            </div>
            
            <div class="info-item">
                <div class="label">Generated</div>
                <div class="value">${new Date().toLocaleString()}</div>
            </div>
            
            <div class="info-item">
                <div class="label">Domain</div>
                <div class="value">${this.extractDomain(url)}</div>
            </div>
        </div>
        
        <div class="footer">
            Generated by AI Studio Pro Web Search<br>
            Save this file to keep track of useful resources
        </div>
    </div>
</body>
</html>`;

    const blob = new Blob([htmlContent], { type: "text/html" });
    this.downloadBlob(blob, `${title.replace(/\s+/g, "_")}_info.html`);
  }

  private static async generateMarkdownFile(
    title: string,
    url: string,
    keywords: string[],
    category: string,
  ): Promise<void> {
    const content = `# ${title}

## Resource Information

**URL:** [${url}](${url})  
**Category:** ${category}  
**Generated:** ${new Date().toLocaleString()}  
**Domain:** ${this.extractDomain(url)}

## Keywords

${keywords.map((keyword) => `- \`${keyword}\``).join("\n")}

## Description

This markdown file contains metadata about a resource found through AI Studio Pro Web Search.

### Usage Notes

- Click the URL above to visit the original resource
- Keywords can help you remember what this resource is about
- Category indicates the type of platform or service

### Tags

${keywords.map((keyword) => `#${keyword.replace(/\s+/g, "")}`).join(" ")}

---

*Generated by AI Studio Pro - Keep track of your valuable web resources*
`;

    const blob = new Blob([content], { type: "text/markdown" });
    this.downloadBlob(blob, `${title.replace(/\s+/g, "_")}_info.md`);
  }

  private static async generateXMLFile(
    title: string,
    url: string,
    keywords: string[],
    category: string,
  ): Promise<void> {
    const xmlContent = `<?xml version="1.0" encoding="UTF-8"?>
<resource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <metadata>
        <title>${this.escapeXml(title)}</title>
        <url>${this.escapeXml(url)}</url>
        <category>${this.escapeXml(category)}</category>
        <domain>${this.escapeXml(this.extractDomain(url))}</domain>
        <generatedAt>${new Date().toISOString()}</generatedAt>
        <source>AI Studio Pro Web Search</source>
    </metadata>
    <keywords>
        ${keywords.map((keyword) => `<keyword>${this.escapeXml(keyword)}</keyword>`).join("\n        ")}
    </keywords>
    <description>
        This XML file contains structured metadata about a web resource found through search.
    </description>
</resource>`;

    const blob = new Blob([xmlContent], { type: "application/xml" });
    this.downloadBlob(blob, `${title.replace(/\s+/g, "_")}_info.xml`);
  }

  private static async generateGenericFile(
    title: string,
    url: string,
    keywords: string[],
    category: string,
    fileType: string,
  ): Promise<void> {
    const extension = fileType.startsWith(".") ? fileType : `.${fileType}`;
    const content = `Resource Information File
========================

Title: ${title}
URL: ${url}
Category: ${category}
File Type: ${extension}
Keywords: ${keywords.join(", ")}
Generated: ${new Date().toLocaleString()}
Domain: ${this.extractDomain(url)}

This ${extension} file contains metadata about your searched resource.
Generated by AI Studio Pro Web Search.

Keywords found:
${keywords.map((keyword) => `- ${keyword}`).join("\n")}

Visit the original URL: ${url}
`;

    const blob = new Blob([content], { type: "application/octet-stream" });
    this.downloadBlob(blob, `${title.replace(/\s+/g, "_")}_info${extension}`);
  }

  private static downloadBlob(blob: Blob, filename: string): void {
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  private static extractDomain(url: string): string {
    try {
      return new URL(url).hostname;
    } catch {
      return "unknown-domain";
    }
  }

  private static escapeXml(unsafe: string): string {
    return unsafe.replace(/[<>&'"]/g, function (c) {
      switch (c) {
        case "<":
          return "&lt;";
        case ">":
          return "&gt;";
        case "&":
          return "&amp;";
        case "'":
          return "&apos;";
        case '"':
          return "&quot;";
        default:
          return c;
      }
    });
  }
}

export default FileDownloadService;
